@import Foundation;
@import UIKit;

#import "libFlex.h"

%hook FLEXObjectExplorer

%new
-(NSString *)getClassHeirarchy{
    return [[FLEXRuntimeUtility classHierarchyOfObject:self.object] componentsJoinedByString:@" : "];
}

%new
-(NSString *)getProperties{
    NSString *propertyName = @"";
    if (self.properties){
        for (FLEXProperty *property in self.properties) {
		propertyName = [propertyName stringByAppendingString: [property fullDescription]];
        propertyName = [propertyName stringByAppendingString: @";\n"];
	    }
    }
    
    return propertyName;
}
%new
-(NSString *)getIvars{
    NSString *ivarName = @"";
    if (self.ivars){
        for (FLEXIvar *ivar in self.ivars){
        ivarName = [ivarName stringByAppendingString: [ivar description]];
        ivarName = [ivarName stringByAppendingString: @";\n"];
        }
    }
    
    return ivarName;
}
%new
-(NSString *)getInstanceMethods{
    NSString *convertedText = @"";
    for (FLEXMethod *object in self.methods) {       
		convertedText = [convertedText stringByAppendingString: [object description]];
		convertedText = [convertedText stringByAppendingString: @";\n"];
	}
    return convertedText;
}
%new
-(NSString *)getClassMethods{
    NSString *convertedText = @"";
    for (FLEXMethod *object in self.classMethods) {       
		convertedText = [convertedText stringByAppendingString: [object description]];
		convertedText = [convertedText stringByAppendingString: @";\n"];
	}
    return convertedText;
	}
%new
-(NSString *)logInstanceMethods{
	NSString *methodBody;
	NSString *convertedText = @"";
    for (FLEXMethod *object in self.methods) {
        NSLog(@"NSLogify %@",[object prettyNameForLogging]);
		convertedText = [convertedText stringByAppendingString: [object description]];
		//check for (void) add %orig else return %orig;
		methodBody = [NSString stringWithFormat:@" {\n\t%@\n", [object prettyNameForLogging]];
        if (object.signature.methodReturnType){
            if ([[FLEXRuntimeUtility readableTypeForEncoding:@(object.signature.methodReturnType)] isEqualToString:@"void"]){
			methodBody = [methodBody stringByAppendingString: @"\t\%orig;\n}"];
		   }else {
			methodBody = [methodBody stringByAppendingString: @"\treturn \%orig;\n}"];
		   }
        }
		
		convertedText = [convertedText stringByAppendingString: methodBody];
		convertedText = [convertedText stringByAppendingString: @"\n"];
	}
    return convertedText;
}
%new

-(NSString *)logClassMethods{
    NSString *methodBody;
	NSString *convertedText = @"";
    if (self.classMethods){
        for (FLEXMethod *object in self.classMethods) {
		convertedText = [convertedText stringByAppendingString: [object description]];
		//check for (void) add %orig else return %orig;
		methodBody = [NSString stringWithFormat:@" {\n\t%@\n", [object prettyNameForLogging]];
		if ([[FLEXRuntimeUtility readableTypeForEncoding:@(object.signature.methodReturnType)] isEqualToString:@"void"]){
			methodBody = [methodBody stringByAppendingString: @"\t\%orig;\n}"];
		}else {
			methodBody = [methodBody stringByAppendingString: @"\treturn \%orig;\n}"];
		}
		convertedText = [convertedText stringByAppendingString: methodBody];
		convertedText = [convertedText stringByAppendingString: @"\n"];
	    }
    }
   
    return convertedText;
}
%new
-(NSString *)joinAndGenerateHeader{
    // NSMutableString *header = [[NSMutableString alloc]init];
    // [header appendFormat: @"%@",[self getInstanceMethods]];

    // return header;
    NSString *headerText;
    headerText = [NSString stringWithFormat: @"//Generated by Flex Extend\n@interface %@ : %@ {\n//Instance Variables\n%@}\n//Properties\n%@\n//Instance Methods\n%@\n//Class Methods\n%@\n@end\n\n%%hook %@\n//Log Instance Methods\n%@\n//Log Class Methods\n%@\n%%end",[FLEXRuntimeUtility safeClassNameForObject:self.object],[self getClassHeirarchy],[self getIvars],[self getProperties],[self getInstanceMethods],[self getClassMethods],[FLEXRuntimeUtility safeClassNameForObject:self.object],[self logInstanceMethods],[self logClassMethods]];
    return headerText;
}
%new
-(void)convertMethodsToText {
	dispatch_async(dispatch_get_main_queue(), ^{
    NSLog(@"NSLogify %@",[self joinAndGenerateHeader]);
	UIPasteboard *pasteboard = [UIPasteboard generalPasteboard];
	pasteboard.string = [self joinAndGenerateHeader];
});
}
%end


%hook FLEXObjectExplorerViewController
-(void)viewDidLoad{
	%orig;
	[self addToolbarItems:@[[[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemOrganize target:self action:@selector(moreButtonPressed:)]
	,[[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemOrganize target:self action:@selector(loggingButtonPressed:)]]];
}
%new
- (void)loggingButtonPressed:(UIBarButtonItem *)sender {
    NSLog(@"NSLogify hi");
     UIAlertController *actionSheet = [UIAlertController alertControllerWithTitle:@"Flex Extend" message:@"(Hearse)" preferredStyle:UIAlertControllerStyleActionSheet];

    [actionSheet addAction:[UIAlertAction actionWithTitle:@"Cancel" style:UIAlertActionStyleCancel handler:^(UIAlertAction *action) {

        // Cancel button tappped.
        [actionSheet dismissViewControllerAnimated:YES completion:^{
        }];
    }]];

    [actionSheet addAction:[UIAlertAction actionWithTitle:@"Complete Header" style:UIAlertActionStyleDefault handler:^(UIAlertAction *action) {
        // OK button tapped.
        [self.explorer convertMethodsToText];
        [actionSheet dismissViewControllerAnimated:YES completion:^{
        }];
    }]];
    [actionSheet addAction:[UIAlertAction actionWithTitle:@"Instance Variables" style:UIAlertActionStyleDefault handler:^(UIAlertAction *action) {
        // OK button tapped.
        UIPasteboard *pasteboard = [UIPasteboard generalPasteboard];
	    pasteboard.string = [self.explorer getIvars];
        [actionSheet dismissViewControllerAnimated:YES completion:^{
        }];
    }]];
    [actionSheet addAction:[UIAlertAction actionWithTitle:@"Generate Properties" style:UIAlertActionStyleDefault handler:^(UIAlertAction *action) {
        // OK button tapped.
        UIPasteboard *pasteboard = [UIPasteboard generalPasteboard];
	    pasteboard.string = [self.explorer getProperties];
        [actionSheet dismissViewControllerAnimated:YES completion:^{
        }];
    }]];
    [actionSheet addAction:[UIAlertAction actionWithTitle:@"Generate Methods" style:UIAlertActionStyleDefault handler:^(UIAlertAction *action) {
        // OK button tapped.
        NSString *text;
        UIPasteboard *pasteboard = [UIPasteboard generalPasteboard];
        text = [NSString stringWithFormat:@"//Instance Methods\n%@\n//Class Methods\n%@\n",[self.explorer getInstanceMethods],[self.explorer getClassMethods]];
	    pasteboard.string = text;
        [actionSheet dismissViewControllerAnimated:YES completion:^{
        }];
    }]];
    [actionSheet addAction:[UIAlertAction actionWithTitle:@"Log Methods" style:UIAlertActionStyleDefault handler:^(UIAlertAction *action) {
        // OK button tapped.
        NSString *text;
        UIPasteboard *pasteboard = [UIPasteboard generalPasteboard];
        text = [NSString stringWithFormat:@"//Log Instance Methods\n%@\n//Log Class Methods\n%@\n",[self.explorer logInstanceMethods],[self.explorer logClassMethods]];
	    pasteboard.string = text;
        [actionSheet dismissViewControllerAnimated:YES completion:^{
        }];
    }]];
    


    // Present action sheet.
    [self presentViewController:actionSheet animated:YES completion:nil];

} 


%end

%hook FLEXMethod
%property (nonatomic,strong) NSMutableString *listOfArgs;
- (NSArray *)prettyArgumentComponents {
    // NSMethodSignature can't handle some type encodings
    // like ^AI@:ir* which happen to very much exist
    if (self.signature.numberOfArguments < self.numberOfArguments) {
        return nil;
    }
    
    NSMutableArray *components = [NSMutableArray new];

    NSArray *selectorComponents = [self.selectorString componentsSeparatedByString:@":"];
    NSUInteger numberOfArguments = self.numberOfArguments;
    
    for (NSUInteger argIndex = 2; argIndex < numberOfArguments; argIndex++) {
        assert(argIndex < self.signature.numberOfArguments);
        //hearse
        const char *argType = [self.signature getArgumentTypeAtIndex:argIndex] ?: "?";
        NSString *readableArgType = [FLEXRuntimeUtility readableTypeForEncoding:@(argType)];
        NSString *prettyComponent = [NSString
            stringWithFormat:@"%@:(%@)arg%d ",
            selectorComponents[argIndex - 2],
            readableArgType,argIndex-1
        ];
   
        [components addObject:prettyComponent];
    }
    
    return components;
}
%new
- (NSString *)prettyNameForLogging {
    NSString *methodTypeString = self.isInstanceMethod ? @"-" : @"+";
    NSString *readableReturnType = [FLEXRuntimeUtility readableTypeForEncoding:@(self.signature.methodReturnType ?: "")];
    NSString *returnSpecifier;
    NSString *prettyName = [NSString stringWithFormat:@"%@ (%@)", methodTypeString, readableReturnType];
    NSArray *components = [self prettyArgumentComponentsForLogging];
    NSMutableString *prettyNameForLogging = [[NSMutableString alloc]init];
   // NSMutableString *listOfArgs = [[NSMutableString alloc]init];


    // for (int i = 1; i < self.numberOfArguments - 1; i++){

    //     [listOfArgs appendFormat:@",%@",[self returnArgName:self.argType forIndex:self.argIndex]];
    // }

    // here we define the use case for return type and other things
    //has args but returns void
    if (components.count && [readableReturnType isEqualToString:@"void"]) {

        [prettyNameForLogging appendFormat:@"NSLog(@\"%@\"%@);",[prettyName stringByAppendingString:[components componentsJoinedByString:@" "]],self.listOfArgs];
        return prettyNameForLogging;
    } 
    //has args and returns
    else if (components.count && ![readableReturnType isEqualToString:@"void"] && (readableReturnType)){
			NSLog(@"NSLogify here %@",prettyNameForLogging);

        returnSpecifier = [self returnTypeSpecifier:readableReturnType];
        [prettyNameForLogging appendFormat:@"NSLog(@\"orig:%@ %@\",%@%@);",returnSpecifier,[prettyName stringByAppendingString:[components componentsJoinedByString:@" "]],[self returnOrigSpecifierName:readableReturnType],self.listOfArgs];
        return prettyNameForLogging;
    }
    //no args and returns
    else if (!components.count && ![readableReturnType isEqualToString:@"void"]){

        returnSpecifier = [self returnTypeSpecifier:readableReturnType];
        [prettyNameForLogging appendFormat:@"NSLog(@\"orig:%@ %@\",%@);",returnSpecifier,[prettyName stringByAppendingString:self.selectorString],[self returnOrigSpecifierName:readableReturnType]];
        return prettyNameForLogging;
    }
    //void and no args
    else {
			

        [prettyNameForLogging appendFormat:@"NSLog(@\"%@\");",[prettyName stringByAppendingString:self.selectorString]];

        return prettyNameForLogging;

    }
	
}
//hearse
%new
- (NSArray *)prettyArgumentComponentsForLogging {
    if (self.signature.numberOfArguments < self.numberOfArguments) {
        return nil;
    }
    NSMutableArray *components = [NSMutableArray new];
    NSArray *selectorComponents = [self.selectorString componentsSeparatedByString:@":"];
    NSUInteger numberOfArguments = self.numberOfArguments;
    NSString *argSpecifier;
    self.listOfArgs = [[NSMutableString alloc]init];
    for (NSUInteger argIndex = 2; argIndex < numberOfArguments; argIndex++) {
        assert(argIndex < self.signature.numberOfArguments);
        
        const char *argType = [self.signature getArgumentTypeAtIndex:argIndex] ?: "?";
        NSString *readableArgType = [FLEXRuntimeUtility readableTypeForEncoding:@(argType)];
        argSpecifier = [self returnTypeSpecifier:readableArgType];
        [self.listOfArgs appendFormat:@",%@",[self returnArgName:readableArgType forIndex:argIndex-1]];
        NSString *prettyComponent = [NSString
            stringWithFormat:@"%@:(%@)arg%d : %@",
            selectorComponents[argIndex - 2],
            readableArgType,argIndex-1,argSpecifier
        ];
        [components addObject:prettyComponent];
    }
    return components;
}
//hearse
%new
-(NSString *)returnTypeSpecifier:(NSString *)type{
    //here we are going perform a check for what data type it is and what specifier we should assign to each arg
        if ([type isEqualToString:@"int"]){return @"\%d";}
        else if ([type isEqualToString:@"BOOL"]){return @"\%d";}
        else if ([type isEqualToString:@"double"]){return @"\%f";}
        else if ([type isEqualToString:@"NSInteger"]){return @"\%ld";}
        else if ([type isEqualToString:@"NSUInteger"]){return @"\%ld";}
        else {return @"%@";}
        //end
}
//hearse
%new
-(NSString *)returnArgName:(NSString *)argType forIndex:(int)index{
    
        if ([argType isEqualToString:@"CGPoint"]){ return [NSString stringWithFormat:@"NSStringFromCGPoint(arg%d)",index]; }
        else if ([argType isEqualToString:@"CGSize"]){ return [NSString stringWithFormat:@"NSStringFromCGSize(arg%d)",index]; }
        else if ([argType isEqualToString:@"NSRange"]){ return [NSString stringWithFormat:@"NSStringFromNSRange(arg%d)",index]; }
        else if ([argType isEqualToString:@"SEL"]){ return [NSString stringWithFormat:@"NSStringFromSelector(arg%d)",index]; }
        //normal arg return
        else {
            return [NSString stringWithFormat:@"arg%d",index]; 
        }  
}
//hearse
%new
-(NSString *)returnOrigSpecifierName:(NSString *)argType{
    if ([argType isEqualToString:@"CGPoint"]){ return [NSString stringWithFormat:@"NSStringFromCGPoint(%%orig)"]; }
    else if ([argType isEqualToString:@"CGSize"]){ return [NSString stringWithFormat:@"NSStringFromCGSize(%%orig)"]; }
    else if ([argType isEqualToString:@"NSRange"]){ return [NSString stringWithFormat:@"NSStringFromNSRange(%%orig)"]; }
    else if ([argType isEqualToString:@"SEL"]){ return [NSString stringWithFormat:@"NSStringFromSelector(%%orig)"]; }
        //normal arg return
    else {
        return [NSString stringWithFormat:@"%%orig"]; 
    }

    
}
%end